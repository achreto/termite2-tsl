We define TSL v2 syntax in two steps.  First, we define basic TSL 
syntax that does not support modules.  Next we define full TSL 
that add support for module composition and inheritance to basic 
TSL.

The following description only describes features necessary for 
modelling software components of the system (the OS and the 
driver), and hardware components written C-based HDLs (e.g., DML).  
Support for Verilog-style HDLs is coming soon.


Basic TSL
=========

Templates
---------

A specification in basic TSL consists of a single template that 
describes the complete system, including, the driver, the device, 
and the OS.

//------------------------------
template my_template
/* type declarations */
/* constant declaration */
/* variable declarations */
/* init blocks */
/* process declarations */
/* task declarations */
/* function declarations */
/* goal declarations */
/* continuous assignments */
endtemplate
//------------------------------


Type declarations
-----------------

Type system similar to TSL1: fixed-size ints, bools, structs, arrays.

//------------------------------
typedef int<20> baud_t;
//------------------------------

Type declarations can appear in top-level and template scopes

Constant declarations
---------------------

//------------------------------
const int<8> SENDQ_SIZE = 128;

typedef struct {bool x; bool y;} dummy_t;
const dummy_t DUMMY = {.x = true, .y = false};
//------------------------------

Variables
---------

Variables can be declared anywhere inside the template, process, 
function or task.  

A variable can have an "invisible" attribute.  Variables that 
don't have this attribute can only be modified by visible 
transitions (see below).  This attribute does not increase the 
expressive power of the language, but prevents accidental misuse 
of variables.  

//------------------------------
baud_t baud;
invisible baud_t dev_baud;
int<20> x;
int<20> xs[20];
//------------------------------

Init blocks
-----------

An init block specifies a constraint on initial values of template 
variables.  It is a function (see below) without arguments and 
with implicit return type Bool.  A template can have multiple init 
blocks.

//------------------------------
init {
    return (x == 0) && (xs[0] == 5);
}
//------------------------------


Processes
---------

A template can contain one or more processes.  Every state 
transition of the system occurs in the context of a single 
process, i.e., only one process can perform a transition at a 
time.  Processes become runnable as soon as the template is 
instantiated.

The body of a process is a statement.  Types of statements: 
variable assignment, sequential block, parallel block, 
non-deterministic choice, termination, loop, etc.  (see below).

//------------------------------

template my_template

process os_model {
    // start of transition 1
    x = 0; 
    y = x; 
    // implicit end of transition before choice
    choice {
        // subprocess 1
        {
            ret = drv_probe(); 
            if (ret != 0) {
                // os_model process terminates
                stop;
            };
            // end of transition 2
        };
        // subprocess 2
        {
            forever {
                drv_set_baud(*);
            };               
        };
    };
    
}

endtemplate

//------------------------------


Assignments
-----------

Assignments have C-style semantics.  An assignment completes 
instantaneously.  Multiple assignments can be performed in a 
single transition.  Multiple assignments to the same variable as 
converted to SSA form by replacing intermediate assignments with 
assignments to temporary variables.

pause
-----

The pause statement terminates previous transition.  It is likely 
to be of limited use, as other means of starting a new transition 
without an explicit pause are likely to be more sufficient in most 
situations (see below)

//------------------------------
process my_process {
    x = 0;
    y = x;
    pause;
    
}
//------------------------------

choice
------

The choice process performs non-determinictic choice between several 
subprocesses.  Given three processes P1, P2, and P3:

P1:
->o--a-->o

P2:
->o--b-->o

P3:
->o--c-->o

process {P1; choice{P2;P3}} behaves as follows:
           --b--
          /     \
->o--a-->o       ->o
          \     /
           --c--

i.e., the last action of process P1 is followed by the first 
action of one of the processes P1 and P2.  

Note that the choice operator implicitly terminates the precedding 
transition.  For example:

//------------------------------
process my_process {
    x = 0;
    y = x;
    choice {
        {x = 2};
        {y = 0};
    };
}
//------------------------------

The first two assignments are performed automically.  The 
following assignment (x=2) or (y=0) is performed in a separate 
transition.

fork
----

The fork process defines (interleaved) parallel composition of two 
or more processes.  The fork process terminates when all forked 
processes terminate.  For example, given processes P1, P2, and P3:

P1:
->o--a-->o

P2:
->o--b-->o

P3:
->o--c-->o

process {P1; fork{P2;P3}} behaves as follows:

           --b-->o--c--
          /            \
->o--a-->o              ->o
          \            /
           --c-->o--b--


Note that fork cannot be used to create an unbounded number of 
processes, e.g., it cannot be used inside a loop with variable 
bounds.  

Similar to choice, fork terminates the preceding transition.  


stop
----

The stop statement terminates either the top-level process or the 
innermost forked or forever process.  By default, a process 
terminates after performing its (syntactically) last action.  stop 
allows teminating the process at any time.

stop does not represent a transition, but rather a state marker 
that marks a final state of the process.  For example:

//------------------------------
process my_process {
    ret = drv_probe();
    if (ret != 0)
        stop;
    drv_send();
}
//------------------------------

Assume that the drv_probe task consists of a single transition.  
Then the above process has the following transition relation.

    --drv_probe(ret!=0)-->(F)
   /
->o
   \
    --drv_probe(ret==0)-->o--drv_send-->o--...-->

where (F) denotes a final state.  

A fork process reaches a final state once each of the forked 
processes is in a final state.  For example, the following process 
forks two subprocesses.  The first performs a non-deterministic 
choice between executing action "a" or terminating immediately.  
The second subprocess performs action "b".  

//------------------------------
process my_process {
    fork{
        choice {
            a;
            stop;
        };
        b;
    };
    c;
}
//------------------------------

Here, the transition relation of the choice{..} process is:

-->(F)--a-->(F)

i.e., both the initial state and the state after action "a" are 
final states.  

This transiton relation of the whole my_process process is:

     --a-->o--b-->o--c-->(F)
    /
-->o--b-->o--a-->o--c-->(F)
    \
     --b-->o--c-->(F)



forever
-------

The forever construct executes a process forever (or until a stop 
statement).  In the following process,

//------------------------------
process my_process {
    forever {
      choice {
            a;
            stop;
      };
    };
    b;
}
//------------------------------

the forever{..} subprocess has the following transition relation:

-->(F)--a--
    ^      \
    \      /
     -----

Hence the transition relation of my_process is:

     --b-->(F)
    /
 -->o--a---
    ^      \
    \      /
     ------


assume
------

The assume statement defines transition guard enforced by the 
environment.  It can occur at the start of a transition or 
anywhere inside of the transition.  

//------------------------------
process my_process {
   x=0;
   y=2;
   choice {
       {
           assume(x>0);
           y = x;
       };
       {
           assume(x<0);
           y = z;
       };
}
//------------------------------

Here, the initial transition initialises x to 0.  The process than 
waits until x becomes non-zero (e.g., after being modified by 
another process), which enables one of the two transitions inside 
the choice construct.  Note that although choice represents 
non-deterministic choice, it only chooses among enabled 
transition.  In this example at most one of the two transitions 
can be enabled at any time.

The assume construct can be used to implement process 
synchronisation mechanisms such as events, semaphores, waiting on 
a condition, etc.


assert
------

assert statements model safety constraints.  When a process performs a 
transition that contains a violated assertion, it ends up in an error state. 

//------------------------------
process my_process{
   write8(REG, val);
   assert(dev_baud==os_baud);
}; 
//------------------------------


if, do, while, for
-------------------------

These constructs have the normal C semantics.  They do not start a 
new transition.  

Do we want "break"?

case
----

A cleaner version of the C-style switch statement.  Does not 
require break; executes the first matching clause only.

//------------------------------
case (y) {
    0: x = 1;
    default: x = 2;
}
//------------------------------


function
--------

Functions represent atomic computations without side effects.  A 
function cannot modify state variables or start a new transition.  
It is allowed to read values of state variables.  Functions can be 
used for example inside assume and assert statements that must be 
side-effect-free

//------------------------------
function bool configured() {
    return (dev_baud == os_baud);
}
//------------------------------

procedure
---------

Procedures are similar to functions, except they are allowed to 
have side effects.  

//------------------------------
procedure update_state{
    x=2;
    y=z;
    return y;
}
//------------------------------

task
----

A task represents a named process that can be instantiated from 
multiple other processes.  Task invocation always starts a new 
transition.  A task can have arguments and a return value (do we 
want in/out arguments?).  A task can have one of the following 
types: controllable/uncontrollable/invisible.  If no type is 
provides, the task is assumed to be invisible.  Only controllable 
tasks can be invoked from synthesised code.  

//------------------------------
controllable int<8> probe() {
    os_baud = 115200;
    write8(REG_BAUD,4);
    return 0;
};
//------------------------------

A task is terminated by return statement rather that stop.  A stop 
statement inside a task terminates the process containing the 
task.  

A return statement does not start a new transition.  Furthermore, 
it does not terminate the current transition, so that statements 
following task invocation can be executed as part of the final 
transition of the task.  For example,

//------------------------------
process my_process {
    ret = probe();
    if (ret != 0)
        stop;
    x=0;
}
//------------------------------

Here the write8 call inside the probe() task, the return from the 
task and the subsequent assignment (x=0) or task termination take 
place in a single transition.

Note: recursive invocations of functions, procedures and tasks are 
not allowed.

Note 2: functions, procedures, and tasks are collectively referred 
to as methods.

non-deterministic values
------------------------

Non-deterministic choice of values by the environment can be 
modelled using the star (*) symbol.  In combination with the 
"assume" construct it can be used to model arbitrary constraints 
of values.  

//------------------------------
process my_process {
    drv_set_baud(*);
}

uncontrollable drv_set_baud(baud_t baud) {
    assume ((baud == 115200) || (baud == 9600));
}
//------------------------------


goal
----

A template can contain a list of named goals.  The syntax for 
goals is not defined yet.

{...}
-----

The {...} statement represents a block of code that must be 
synthesised.  It can have two forms.  The first form specifies a 
postcondition that must hold when the synthesised block 
terminates.  This postcondition is translated into an implicit 
goal and the goal synthesised for the block follows a strategy for 
this goal (while staying within the winning region for other 
goals).

//------------------------------
{...} post(configured());
//------------------------------

The second goal specifies a named goal instead of the 
postcondition.  

//------------------------------
task send(int<8> dat) {
    {...} using seng_goal;
}
//------------------------------

This means that the synthesised code will follow the strategy for 
the specified goal while staying within the winning set for other 
goals.  This does not guarantee that the system will be within the 
goal when the synthesised block terminates.  In this example, the 
send_goal goal can only be reached inside the interrupt handler, 
whereas the send() task only queues data to be sent in the future.

Thus the {...} construct allows the user to manually schedule 
goals, which seens necessary to produce sensible code.

Continuous assignments
----------------------

A continuous assignment binds a variable to an expression.  The 
assignment is effective on every transition.  The RHS of a 
continuous assignment is an expression over state variables and 
other continuously assigned variables.  State variable values are 
taken at the start of the current transition.  

//------------------------------
template my_template

int<32> dev_baud;

assign dev_baud = case reg_baud {
                      0: 9600;
                      1: 115200;
                  }
endtemplate
//------------------------------

Circular dependencies between continuously assigned variables are 
not allowed. Continuous assignments are specified at the top level 
inside the template.  A continuously assigned variable is declared 
as a normal state variable.  It can be read by any process, but 
can only be assigned by a single continuous assignment expression.

Expression syntax
-----------------

Expression syntax includes: 
* Literals: 
  - true, false Boolean literals
  - enum literals
  - const literals
  - integer literals (binary, octal, decimal, and hex) with 
    optional width specifier: 5'b110001, 16'o137,
    32'd123456, 16'h56ab
    
* C-style Boolean, arithmetic and bit-wise operators are 
supported.
* Array indexing: xs[i], where i is a (potentially variable) 
expression
* Bit slice: x[h:l], where h and l are integer constants.
* Two versions of case expressions (in addition to the case 
statement described above):

//------------------------------
x = case (y) {
        0: z;
        1: 0;
        default: x;
    }

x = cond {
        (y>z): y;
        default: z;
    }
//------------------------------

* Function or procedure application: x = f(y,z).  Procedure calls
  are illegal in contexts where side effects are not permitted,
  e.g., inside assert and assume statements.
* Struct expression:
//------------------------------
typedef struct {
    bool x;
    int<8> y;
} foo_t;

foo_t f;

f = foo_t{.x = true, .y = 2}
//------------------------------


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Full TSL
========

Full TSL syntax allows composing templates using inheritance and 
connections.

Inheritance
-----------

In full TSL, a template can be derived from an existing template.  
The parent template can only describe the interface to be 
implemented by the client or provide partial or complete 
implementation of this interface.  The derived template inherits 
the entire content of the parent.  It can declare additional 
variables, methods, and goals.  It can also change or extend 
definitions from the parent template.  

//------------------------------
template parent
controllable t1();
endtemplate

template child
derive parent;

// example of invoking an inherited task
process test{
    t1();
};

// redefining inherited task
controllable t1() {
    write8(REG_CTL,0);
};
endtemplate
//------------------------------

The parent template can contain partially defined methods.  A 
partially defined task can consist of a prototype with optional 
"before" and "after" blocks.  The content of these blocks is 
inserted respectively before and after the actual code for the 
task.  A partially defined function or procedure consists of a 
prototype without a body.

//------------------------------
template parent

// Define pre- and post- conditions of the task
uncontrollable drv_set_baud(baud_t baud)
    before{
        assume (baud == 115200);
    }
    after{
        assert(configured());
    }
endtemplate

template child
derive parent;

// Fill in implementation details
uncontrollable drv_set_baud(baud_t baud) {
    write8(REG_CTL, 0);
    {...} post (configured());
}
endtemplate

/* The above task definition compiles to:
uncontrollable drv_set_baud(baud_t baud) {
    assume (baud == 115200);
    write8(REG_CTL, 0);
    {...} post (configured());
    assert(configured());
}
*/

endtemplate
//------------------------------



Connections
-----------

A template can be instantiated inside another template.  For 
example, the top-level template can instantiate driver, bus, and 
device templates.

A template can require access to variables and methods provided by 
another template.  For example, the driver template needs to 
invoke register access methods declared in the bus template, 
whereas the device can invoke device-class callbacks in the driver 
template.  To this end the importing template is parameterised 
with references to one or more other templates.

A parameter declaration usually refers to an abstract template, 
whereas the actual parameter used to instantiate the template must 
refer to a concrete template that defines bodies of all methods.

//------------------------------
template parent
export controllable write8(int<8> offset, int<8> val);
endtemplate

template child
derive parent;
controllable p.write8(int<8> offset, int<8> val){
    // do stuff
};
endtemplate

// parameterised template
template X(parent p)
process my_process {
    p.write8(REG_CTL, 0); // call a method of p
}
endtemplate

template complex
// create two template instances
child c;
X x(.p = c); // pass child's implementation of parent as an
             // argument to X
endtemplate
//------------------------------

The importing template only has access to variables and methods of 
the parameter template declared with the "export" keyword (see the 
write8 method in the above example).
