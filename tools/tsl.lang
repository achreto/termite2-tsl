<?xml version="1.0" encoding="UTF-8"?>
<!--

 This file is a Gnome-toolkit language syntax file for SourceView 
 text windows (GTK).  It also works with Gnome-edit.

 This file should be copied to /usr/share/gtksourceview-2.0/language-specs/


 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Library General Public
 License as published by the Free Software Foundation; either
 version 2 of the License, or (at your option) any later version.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Library General Public License for more details.

 You should have received a copy of the GNU Library General Public
 License along with this library; if not, write to the
 Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 Boston, MA 02111-1307, USA.

-->
<language id="tsl" _name="TSL" version="2.0" _section="Sources">
    <metadata>
      <property name="mimetypes">text/x-tsl;text/x-tslsrc;image/x-xpixmap</property>
      <property name="globs">*.tsl</property>
      <property name="line-comment-start">//</property>
      <property name="block-comment-start">/*</property>
      <property name="block-comment-end">*/</property>
    </metadata>

    <styles>
        <style id="comment"           _name="Comment"             map-to="def:comment"/>
        <style id="error"             _name="Error"               map-to="def:error"/>
        <style id="string"            _name="String"              map-to="def:string"/>
        <style id="preprocessor"      _name="Preprocessor"        map-to="def:preprocessor"/>
        <style id="common-defines"    _name="Common Defines"      map-to="def:special-constant"/>
        <style id="included-file"     _name="Included File"       map-to="def:string"/>
        <style id="char"              _name="Character"           map-to="def:character"/>
        <style id="tslStatement"      _name="Keyword"             map-to="def:keyword"/>
        <style id="tslRepeat"         _name="Repeat"              map-to="def:keyword"/>
        <style id="tslConditional"    _name="Conditional"         map-to="def:keyword"/>
        <style id="tslOperators"      _name="Operators"           map-to="def:keyword"/>
        <style id="tslType"           _name="Data Type"           map-to="def:type"/>
        <style id="storage-class"     _name="Storage Class"       map-to="def:type"/>
        <style id="printf"            _name="printf Conversion"   map-to="def:special-char"/>
        <style id="escaped-character" _name="Escaped Character"   map-to="def:special-char"/>
        <style id="floating-point"    _name="Floating point number" map-to="def:floating-point"/>
        <style id="decimal-number"    _name="Decimal number"      map-to="def:decimal"/>
        <style id="binary-number"     _name="Binary number"       map-to="def:base-n-integer"/>
        <style id="octal-number"      _name="Octal number"        map-to="def:base-n-integer"/>
        <style id="hexadecimal-number" _name="Hexadecimal number"  map-to="def:base-n-integer"/>
        <style id="boolean"           _name="Boolean value"       map-to="def:boolean"/>
    </styles>

    <definitions>
        <!-- TODO: what about scanf ? -->
        <!-- man 3 printf -->
        <context id="printf" style-ref="printf" extend-parent="false">
            <match extended="true">
                \%\%|\%
                (?:[1-9][0-9]*\$)?      # argument
                [#0\-\ \+\'I]*          # flags
                (?:[1-9][0-9]*|\*)?     # width
                (?:\.\-?(?:[0-9]+|\*))? # precision
                (?:hh|ll|[hlLqjzt])?    # length modifier
                [diouxXeEfFgGaAcsCSpnm] # conversion specifier
            </match>
        </context>

        <define-regex id="escaped-character" extended="true">
            \\(                   # leading backslash
            [\\\"\'nrbtfav\?] |   # escaped character
            [0-7]{1,3} |          # one, two, or three octal digits
            x[0-9A-Fa-f]+         # 'x' followed by hex digits
            )
        </define-regex>

        <define-regex id="symbolchar">[!%&amp;*+./&gt;=&lt;?:\\^|~-]</define-regex>

        <context id="tsl" class="no-spell-check">
            <include>

                <!-- gtk-doc -->
                <context ref="gtk-doc:inline-docs-section"/>

                <!-- Comments -->
                <context id="comment" style-ref="comment" end-at-line-end="true" class="comment" class-disabled="no-spell-check">
                    <start>//</start>

                    <include>
                      <context ref="def:in-line-comment"/>
                    </include>
                </context>

                <context id="comment-multiline" style-ref="comment" class="comment" class-disabled="no-spell-check">
                    <start>/\*</start>
                    <end>\*/</end>
                    <include>
                        <context ref="def:in-comment"/>
                    </include>
                </context>

                <context id="close-comment-outside-comment" style-ref="error">
                    <match>\*/(?!\*)</match>
                </context>

                <!-- Preprocessor -->
                <define-regex id="preproc-start">^\s*#\s*</define-regex>

                <context id="if0-comment" style-ref="comment">
                    <start>\%{preproc-start}if\b\s*0\b</start>
                    <end>\%{preproc-start}(endif|else|elif)\b</end>
                    <include>
                        <context id="if-in-if0">
                            <start>\%{preproc-start}if(n?def)?\b</start>
                            <end>\%{preproc-start}endif\b</end>
                            <include>
                                <context ref="if-in-if0"/>
                                <context ref="def:in-comment"/>
                            </include>
                        </context>
                        <context ref="def:in-comment"/>
                    </include>
                </context>

                <context id="include" style-ref="preprocessor">
                    <match extended="true">
                            \%{preproc-start}
                            (include|import)\s*
                            (".*?"|&lt;.*&gt;)
                    </match>
                    <include>
                        <context id="included-file" sub-pattern="2" style-ref="included-file"/>
                    </include>
                </context>

                <context id="preprocessor" style-ref="preprocessor" end-at-line-end="true">
                    <start extended="true">
                            \%{preproc-start}
                            (define|undef|error|pragma|ident|if(n?def)?|else|elif|endif|line|warning)
                            \b
                    </start>
                    <include>
                        <context ref="def:line-continue" ignore-style="true"/>
                        <context ref="string" ignore-style="true"/>
                        <context ref="comment"/>
                        <context ref="comment-multiline"/>
                    </include>
                </context>

                <context id="string" style-ref="string" end-at-line-end="true" class="string" class-disabled="no-spell-check">
                    <start>L?"</start>
                    <end>"</end>
                    <include>
                        <context ref="printf"/>
                        <context id="escaped-character" style-ref="escaped-character">
                            <match>\%{escaped-character}</match>
                        </context>
                        <context ref="def:line-continue"/>
                    </include>
                </context>

                <context id="char" style-ref="char">
                    <match>L?'(\%{escaped-character}|.)'</match>
                </context>

                <context id="binary-number" style-ref="binary-number">
                  <match extended="true">
                    (?&lt;![\w\.])
                    [1-9][0-9]*'[bB][0-1?]+  |
                    [1-9][0-9]*'[sS][bB][\-]?[0-1?]+
                    (?![\w\.])
                  </match>
                </context>

                <context id="octal-number" style-ref="octal-number">
                  <match extended="true">
                    (?&lt;![\w\.])
                    [1-9][0-9]*'[oO][0-7?]+  |
                    [1-9][0-9]*'[sS][oO][\-]?[0-7?]+
                    (?![\w\.])
                  </match>
                </context>

                <context id="decimal-number" style-ref="decimal-number">
                  <match extended="true">
                    (?&lt;![\w\.])
                    [1-9][0-9]*'[dD][0-9?]+   |
                    [1-9][0-9]*'[sS][dD][\-]?[0-9?]+
                    (?![\w\.])
                  </match>
                </context>

                <context id="hexadecimal-number" style-ref="hexadecimal-number">
                  <match extended="true">
                    (?&lt;![\w\.])
                    [1-9][0-9]*'[hH][0-9a-fA-F?]+    |
                    [1-9][0-9]*'[sS][hH][\-]?[0-9a-fA-F?]+
                    (?![\w\.])
                  </match>
                </context>

                <context id="typesize" style-ref="decimal-number">
                    <match extended="true">
                        &lt;[0-9]+&gt;
                    </match>
                </context>

                <context id="float" style-ref="floating-point">
                    <match extended="true">
                        (?&lt;![\w\.])
                        ((\.[0-9]+ | [0-9]+\.[0-9]*) ([Ee][+-]?[0-9]*)? |
                         ([0-9]+[Ee][+-]?[0-9]*))
                        [fFlL]?
                        (?![\w\.])
                    </match>
                </context>

                <context id="decimal" style-ref="decimal-number">
                    <match extended="true">
                        (?&lt;![\w\.])
                        [-]?[0-9]+
                        (?![\w\.])
                    </match>
                </context>

                <context id="tslOperators" style-ref="tslOperators" class="tslOperators">
                  <prefix>(?&lt;!\%{symbolchar})</prefix>
                  <suffix>(?!\%{symbolchar})</suffix>
                    <keyword>\.\.\.</keyword>
                    <keyword>\.</keyword>
                    <keyword>::</keyword>
                    <keyword>:</keyword>
                    <keyword>;</keyword>
                    <keyword>==</keyword>
                    <keyword>!=</keyword>
                    <keyword>=</keyword>
                    <keyword>~</keyword>
                    <keyword>\-</keyword>
                    <keyword>\|\|</keyword>
                    <keyword>\|==</keyword>
                    <keyword>\|</keyword>
                    <keyword>\*</keyword>
                    <keyword>/</keyword>
                    <keyword>\+</keyword>
                    <keyword>\[</keyword>
                    <keyword>]</keyword>
                    <keyword>\{</keyword>
                    <keyword>}</keyword>
                    <keyword>^</keyword>
                    <keyword>&lt;=</keyword>
                    <keyword>&lt;</keyword>
                    <keyword>&gt;=</keyword>
                    <keyword>&gt;</keyword>
                    <keyword>&amp;&amp;</keyword>
                    <keyword>&amp;</keyword>
                </context>
  


                <!-- Keywords -->
                <context id="tslStatement" style-ref="tslStatement" class="tslStatement">
                    <keyword>after</keyword>
                    <keyword>assert</keyword>
                    <keyword>wire</keyword>
                    <keyword>assume</keyword>
                    <keyword>before</keyword>
                    <keyword>choice</keyword>
                    <keyword>default</keyword>
                    <keyword>derive</keyword>
                    <keyword>endtemplate</keyword>
                    <keyword>fork</keyword>
                    <keyword>function</keyword>
                    <keyword>relation</keyword>
                    <keyword>apply</keyword>
                    <keyword>goal</keyword>
                    <keyword>import</keyword>
                    <keyword>prefix</keyword>
                    <keyword>init</keyword>
                    <keyword>out</keyword>
                    <keyword>pause</keyword>
                    <keyword>post</keyword>
                    <keyword>procedure</keyword>
                    <keyword>process</keyword>
                    <keyword>return</keyword>
                    <keyword>stop</keyword>
                    <keyword>switch</keyword>
                    <keyword>task</keyword>
                    <keyword>template</keyword>
                    <keyword>transducer</keyword>
                    <keyword>using</keyword>
                </context>

                <context id="tslRepeat" style-ref="tslRepeat" class="tslRepeat">
                    <keyword>do</keyword>
                    <keyword>while</keyword>
                    <keyword>for</keyword>
                    <keyword>forever</keyword>
                </context>

                <context id="tslConditional" style-ref="tslConditional" class="tslConditional">
                    <keyword>if</keyword>
                    <keyword>else</keyword>
                    <keyword>cond</keyword>
                    <keyword>case</keyword>
                </context>

                <context id="tslTypes" style-ref="tslType" class="tslType">
                    <keyword>bool</keyword>
                    <keyword>uint</keyword>
                    <keyword>sint</keyword>
                    <keyword>struct</keyword>
                    <keyword>enum</keyword>
                    <keyword>void</keyword>
                    <keyword>typedef</keyword>
                </context>

                <context id="storage-class" style-ref="storage-class" class="storage-class">
                    <keyword>const</keyword>
                    <keyword>export</keyword>
                    <keyword>controllable</keyword>
                    <keyword>uncontrollable</keyword>
                    <keyword>invisible</keyword>
                </context>


                <context id="boolean" style-ref="boolean" class="boolean">
                    <keyword>true</keyword>
                    <keyword>false</keyword>
                </context>

            </include>
        </context>
    </definitions>
</language>
