import <uart_class.tsl>

const uint<4> TIOCM_LE   = 0;
const uint<4> TIOCM_DTR  = 1;
const uint<4> TIOCM_RTS  = 2;
const uint<4> TIOCM_ST   = 3;
const uint<4> TIOCM_SR   = 4;
const uint<4> TIOCM_CTS  = 5;
const uint<4> TIOCM_CAR  = 6;
const uint<4> TIOCM_RNG  = 7;
const uint<4> TIOCM_DSR  = 8;
const uint<4> TIOCM_CD   = TIOCM_CAR;
const uint<4> TIOCM_RI   = TIOCM_RNG;
const uint<4> TIOCM_OUT1 = 13;
const uint<4> TIOCM_OUT2 = 14;
const uint<4> TIOCM_LOOP = 15;

/* OS-specific UART-related types (for equivalent class-specific types, see uart_class.tsl) */
typedef uint<4> uart_data_bits_t;

typedef enum {
    UART_STOP_BITS_1,
    UART_STOP_BITS_15,
    UART_STOP_BITS_2
} uart_stop_bits_t;

typedef enum {
    UART_PAR_NONE,
    UART_PAR_EVEN,
    UART_PAR_ODD,
    UART_PAR_HIGH,
    UART_PAR_LOW
} uart_par_t;

typedef uint<32> uart_baud_t;

const uint<16> UART_SENDQ_SIZE = 32;

/* OS-specific UART driver template */
template linux_uart_drv(uart_dev dev)

// Note: together with the uart_os template, we derive its
// dev port (see uart_os definition in uart_class.tsl)
derive uart_os; 

// configuration requested by the OS
cuart_data_bits_t data_bits;
cuart_stop_bits_t stop_bits;
cuart_par_t       parity;
cuart_baud_t      speed;
bool break_send;
bool rts;
bool dtr;
bool out1;
bool out2;
bool loop;

// OS send queue
uint<8>*[10] testp;
uint<8>[UART_SENDQ_SIZE] sendq;
uint<16> sendq_head;
uint<16> sendq_tail;
// device has sent up to this point, which can be between sendq_head and sendq_tail.
// note the "invisible" attribute.
uint<16> sendq_dev_head;

// receiver enabled
bool rx_enabled = false;

// transmit interrupt enabled
bool tx_enabled = true;

// true during configuration requests 
bool config_in_progress;

// Constraints on initial variable values
init (config_in_progress == true) &&
     (sendq_head == 0) &&
     (sendq_tail == 0) &&
     (sendq_dev_head == 0);

// Process that models how the OS invokes driver entry points
process p_uart_os {
    tty_probe();
    fork {
        pconfig:   config();
        ptransmit: transmit();
        ptxctl:    tx_control();
        prxctl:    rx_control();
        pmonitor:  monitor_config();
    };
    tty_shutdown();
};

// Configuration requests
task void config() {
    forever {
        // Choose between sending one of two types of configuration requests
        // and terminating the loop.  
        stop;
        choice {
            set_line_parameters(*,*,*);
            set_baud_rate(*);
            set_mctrl(*);
            get_mctrl();
        };
    };
};

task void transmit() {
    forever {
        stop;
        choice {
            send(*);
            {set_break(true); set_break(false);};             
        };
    };
};

task void tx_control() {
    forever {
        stop;
        tx_enabled = true; 
        start_tx();
        stop;
        stop_tx(); 
        tx_enabled = false;
    };   
};

task void rx_control() {
    forever {
        stop;
        rx_enabled = true; start_rx();
        stop;
        stop_rx(); 
        rx_enabled = false;
    };
};

// generate an error whenever device configuration changes unexpectedly
task void monitor_config() {
    forever {
        stop;
        wait(!configured());
        assert(config_in_progress);
    };
};

/******* Driver methods (could be in a separate template) *******/

task uncontrollable void tty_probe()
before{
    data_bits  = CUART_DATA8;
    stop_bits  = CUART_STOP1;
    parity     = CUART_PARITY_NONE;
    speed      = CUART_B115200;
    break_send = true;
    config_in_progress = true;
}
after{
    config_in_progress = false;
    assert(configured());
};

task uncontrollable void tty_shutdown()
before{
    // send queue must be empty
    assume(sendq_head == sendq_tail);
};

task uncontrollable void set_line_parameters(uart_data_bits_t data, uart_stop_bits_t stopbits, uart_par_t par)
before{
    // conditions on valid argument values
    assume(((stopbits == UART_STOP_BITS_15) && (data == 5)) || ((stopbits == UART_STOP_BITS_2) && (data != 5)));
    case (data) {
        5:       data_bits = CUART_DATA5;
        6:       data_bits = CUART_DATA6;
        7:       data_bits = CUART_DATA7;
        8:       data_bits = CUART_DATA8;
        default: assume(false); // only legal values can be given by the OS
    };
    case(stopbits) {
        UART_STOP_BITS_1:   stop_bits = CUART_STOP1;
        UART_STOP_BITS_15:  stop_bits = CUART_STOP15;
        UART_STOP_BITS_2:   stop_bits = CUART_STOP2;
        default:            assume(false);
    };

    case (par) {
        UART_PAR_NONE: parity = CUART_PARITY_NONE;
        UART_PAR_EVEN: parity = CUART_PARITY_EVEN;
        UART_PAR_ODD:  parity = CUART_PARITY_ODD;
        UART_PAR_HIGH: parity = CUART_PARITY_HIGH;
        UART_PAR_LOW:  parity = CUART_PARITY_LOW;
        default:       assume(false);
    };
    config_in_progress = true;
}
after {
    config_in_progress = false;
    assert(configured());
};

task uncontrollable void set_baud_rate(uart_baud_t baud)
before {
    case (baud) {
        115200:  speed = CUART_B115200;
        57600:   speed = CUART_B57600;
        38400:   speed = CUART_B38400;
        19200:   speed = CUART_B19200;
        9600:    speed = CUART_B9600;
        7200:    speed = CUART_B7200;
        4800:    speed = CUART_B4800;
        3600:    speed = CUART_B3600;
        2400:    speed = CUART_B2400;
        1200:    speed = CUART_B1200;
        default: assume(false);
    };
    config_in_progress = true;
}
after {
    config_in_progress = false;
    assert(configured());
};

task uncontrollable void set_mctrl(uint<32> mctrl)
before{
    rts  = (mctrl[TIOCM_RTS:TIOCM_RTS] == 1);
    dtr  = (mctrl[TIOCM_DTR:TIOCM_DTR] == 1);
    out1 = (mctrl[TIOCM_OUT1:TIOCM_OUT2] == 1);
    out2 = (mctrl[TIOCM_OUT2:TIOCM_OUT2] == 1);
    loop = (mctrl[TIOCM_LOOP:TIOCM_LOOP] == 1);
    config_in_progress = true;
}
after {
    config_in_progress = false;
    assert(configured());
};

// Another function that is hard to specify.  get_mctrl is not 
// guaranteed to return the latest value of modem status bits as
// they may have changed since the last read.  See ns16450_drv.tsl 
// for one possible implementation.
task uncontrollable uint<32> get_mctrl();

task uncontrollable void set_break(bool on)
before {
    break_send = on;
    config_in_progress = true;
}
after {
    config_in_progress = false;
    assert (configured());
};

task uncontrollable void send(uint<8> c)
before {
    // cannot enqueue more if the circular buffer is almost full
    assume(((sendq_tail + 1) % UART_SENDQ_SIZE) != sendq_head);
    sendq_push(c);
};

task uncontrollable void start_rx();
task uncontrollable void stop_rx();

task uncontrollable void start_tx();
task uncontrollable void stop_tx();


/****** OS callbacks ********************************************/

task controllable void send_complete(uint<8> c)
{
    assert (sendq_head != sendq_tail);     // OS queue is not empty
    assert (sendq_dev_head != sendq_head); // device must be ahead of what has been reported to the OS
    assert (tx_enabled);                   // transmission must be allowed
    sendq_head = (sendq_head + 1) % UART_SENDQ_SIZE;
};

// Receive functionality is modelled very loosely in the OS template.
// Depending on controller organisation, the driver may drop received data.
// The correct behaviour will be defined on per-driver basis.
task controllable void receive(uint<8> c)
{
    assert (rx_enabled == true);
};

/****** Device-class events inherited from uart_os **************/

export procedure void evt_send(uint<8> c)
{
    assert (sendq_dev_head != sendq_tail);  // there is something to send
    assert (c == sendq[sendq_dev_head]);    // we are sending a correct character

    sendq_dev_head = (sendq_dev_head + 1) % UART_SENDQ_SIZE;
};

export procedure void evt_receive(uint<8> c, bool error, bool brk);


/****** Goals ***************************************************/

// Note that every uncontrollable task defines an implicit goal: the 
// driver must reach the end of the task without violating assertions.
// This is sufficient for configuration tasks above.  
// Requests that span multiple tasks require additional separately 
// defined goals.

// Infinitely often either queue is empty or the transmitter is disabled or
// send_complete happens
goal send_goal = (sendq_head == sendq_tail) || (!tx_enabled) || (tag == send_complete);

/****************************************************************/

function bool configured () {
    return ((data_bits  == dev.data_bits) && 
            (stop_bits  == dev.stop_bits) && 
            (parity     == dev.parity) &&
            (speed      == dev.speed) &&
            (break_send == dev.break_send) &&
            (rts        == dev.rts) &&
            (dtr        == dev.dtr) &&
            (out1       == dev.out1) &&
            (out2       == dev.out2) &&
            (loop       == dev.loop));
};

endtemplate
