import <linux_uart.tsl>
import <ns16450.tsl> // device spec
import <irq.tsl>


template main

    instance ns16450_drv drv(dev);
    instance ns16450     dev(drv);

endtemplate


template ns16450_drv(ns16450 dev) // Note: we override dev port declaration
                                  // from linux_uart_drv with a concrete
                                  // ns16450 template derived from uart_dev
derive linux_uart_drv;
derive irq_handler;

// interrupt enable register
uint<8> ier;

task uncontrollable void tty_probe()
{
    uint<8> x;

    // TODO: potentially force reset to put the device in a known state.

    {...} post configured();
    // manually write ier, because perfect information strategy
    // knows nothing about it.
    ier[ns16450::IER_RDI : ns16450::IER_RDI] = 0;
    dev.write8(ns16450::IER, ier);
};

task uncontrollable void tty_shutdown() 
{
    {...} post (true/*some device-specific shutdown condition, e.g., interrupts disabled*/);
};

task uncontrollable void set_line_parameters(uart_data_bits_t data, uart_stop_bits_t stopbits, uart_par_t par)
{
    {...} post configured();
};

task uncontrollable void set_baud_rate(uart_baud_t baud)
{
    {...} post configured();
};

task uncontrollable void set_mctrl(uint<32> mctrl)
{
    {...} post configured();
};

task uncontrollable uint<32> get_mctrl()
{
    uint<32> mstat;

    // I made up a new "know" keyword, which tells the code generator
    // that the exact value of a variable must be known by the end of
    // the magic block.
//    {...} post know (dev.dcd);
    mstat[TIOCM_CAR:TIOCM_CAR] = if dev.dcd 1 else 0;

//    {...} post know (dev.cts);
    mstat[TIOCM_CTS:TIOCM_CTS] = if dev.cts 1 else 0;

//    {...} post know (dev.dsr);
    mstat[TIOCM_DSR:TIOCM_DSR] = if dev.dsr 1 else 0;

//    {...} post know (dev.ri);
    mstat[TIOCM_RI:TIOCM_RI] = if dev.ri 1 else 0;

    return mstat;
};

task uncontrollable void set_break(bool on)
{
    {...} post configured();
};

task uncontrollable void send(uint<8> c)
{
    if (tx_enabled) {
        ier[ns16450::IER_THRI : ns16450::IER_THRI] = 1;
        dev.write8(ns16450::IER, ier);
        {...} using send_goal;
    };
};

task uncontrollable void start_rx()
{
    ier[ns16450::IER_RDI : ns16450::IER_RDI] = 1;
    dev.write8(ns16450::IER, ier);
};

task uncontrollable void stop_rx()
{
    ier[ns16450::IER_RDI : ns16450::IER_RDI] = 0;
    dev.write8(ns16450::IER, ier);
};

task uncontrollable void start_tx()
{
    ier[ns16450::IER_THRI : ns16450::IER_THRI] = 1;
    dev.write8(ns16450::IER, ier);
};

task uncontrollable void stop_tx()
{
    ier[ns16450::IER_THRI : ns16450::IER_THRI] = 0;
    dev.write8(ns16450::IER, ier);
};

export task uncontrollable void irq()
{
    // Partial information hint
    uint<8> status = dev.read8(ns16450::LSR); //Read the line status register (tells us the cause of the interrupt)

    if (status[ns16450::LSR_DR : ns16450::LSR_DR] != 0) { //Data was received
        // TODO: receive processing
    };
    if (status[ns16450::LSR_THRE : ns16450::LSR_THRE] != 0) { //Transmit holding register was empty
        {...} using send_goal;

        // If the OS has not queued anything more to send then we disable the transmit 
        // holding regsiter empty interrupt so that we dont get endlessly repeated interrupts
        if (sendq_head == sendq_tail){
            ier[ns16450::IER_THRI : ns16450::IER_THRI] = 0;
            dev.write8(ns16450::IER, ier);
        };
    };
};

endtemplate
